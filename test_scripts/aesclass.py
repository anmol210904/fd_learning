from shamirclass import shamir_handler


class Test:
    def __init__(self):
        self.masked_weights = [[505461, 107357, 533211], [340113, 863806, 147147], [954835, 863822, 168460]]
        self.summed_shares = [[1368247216167005091930215385259613099031337953065488223803817972374930383940901278700951901450488143304728300754289161603398674134685602140990296559638836081, 6611323538299021355480904183077853765150625845016290224789189301875513774375049669968249248392746814876912910515960009338347191848045348734454987224730862479, 1701973435548011221613927661304985904986557414899179663668559863605469456572501150017094404178755495317300406471381896050173321301707498551120400668514765388],[6061961483506707309339584861038433893846954929593248842217016321833176614918578867740964561630774356073241411321671864768246947715688433346300801039295890831, 5205211438449292852711611127524664713314786252607129433734042074996767029578597944227960245135888440957785132735621160294184904821350902669934157977334654016, 5566638857005061494984376381431920409219213168410635066845597559451044187404793937252393124402986139342216253272046275184910851960455263822191771397135073049], [351547481757887222264306829173675949907980329296671036450668130003652326137720662874918699217949528350946708919186393420300844743575205990783456856741050080, 2646461360581424206674021632421826061761916522915823036229021778549302949008300874901692630890879433219912978050464310904635126919633305619011540548926431927, 4729198604240541105129445361299410295428531960391060800136649628351181009099222309583336520011237377097451229010512279367090603976526652000640083894745866055]]
        self.users = [1,2,3]
        self.global_model = []


    def compute_and_average_weights(self):

        print(self.masked_weights)
        print("*****************************************")
        print(self.summed_shares)
        """Performs final aggregation using correct finite field arithmetic."""

        #this is to create tuple to that can be passed shamir function
        summed_shares_tuples = [(i, share) for i, share in enumerate(self.summed_shares, 1)]
        reconstructed_summed_mask = shamir_handler.reconstruct_secret(summed_shares_tuples)
        print(reconstructed_summed_mask)

        #lets sum the elements of masked_weights first

        #reconstructed_summed_mask holds the summed_bit_masks
        #lets do element wise substraction
         #how many elements are there in weights 
        summed_masked_weights_1d = [sum(column) for column in zip(*self.masked_weights)]
        print(summed_masked_weights_1d)
        for i, j in zip(summed_masked_weights_1d, reconstructed_summed_mask):
            self.global_model.append((i - j)/3)
        

        

var = Test()

var.compute_and_average_weights()
print(var.global_model)